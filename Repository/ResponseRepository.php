<?php

namespace UJM\ExoBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ResponseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ResponseRepository extends EntityRepository
{
    /**
     * Allow to know if exists already a response for a question of a user's paper
     *
     * @access public
     *
     * @param integer $paperID id Paper
     * @param integer $interactionID id Interaction
     *
     * Return array[Response]
     */
    public function getAlreadyResponded($paperID, $interactionID)
    {
        $qb = $this->createQueryBuilder('r');
        $qb->join('r.paper', 'p')
            ->join('r.interaction', 'i')
            ->where($qb->expr()->in('p.id', $paperID))
            ->andWhere($qb->expr()->in('i.id', $interactionID));

        return $qb->getQuery()->getResult();
    }

    /**
     * Scores of an exercise for each paper
     *
     * @access public
     *
     * @param integer $exoId id Exercise
     * @param String $order to order result
     *
     * Return array
     */
    public function getExerciseMarks($exoId, $order)
    {
        $qb = $this->createQueryBuilder('r');
        $qb->select('sum(r.mark) as noteExo, p.id as paper')
           ->join('r.paper', 'p')
           ->join('p.exercise', 'e')
           ->where('e.id = ?1')
           ->andWhere('p.interupt =  ?2')
           ->groupBy('p.id')
           ->orderBy($order, 'ASC')
           ->setParameters(array(1 => $exoId, 2 => 0));

        return $qb->getQuery()->getResult();
    }

    /**
     * Get the reponses for a paper and an user
     *
     * @access public
     *
     * @param integer $paperID id paper
     *
     * Return array[Response]
     */
    public function getPaperResponses($paperID)
    {
        $qb = $this->createQueryBuilder('r');
        $qb->join('r.paper', 'p')
           ->leftJoin('p.user', 'u')
           ->where($qb->expr()->in('p.id', $paperID));

        return $qb->getQuery()->getResult();
    }

    /**
     * Get the score for an exercise and an interaction with count
     *
     * @access public
     *
     * @param integer $exoId id Exercise
     * @param integer $interId id Interaction
     *
     * Return array[Response]
     */
    public function getExerciseInterResponsesWithCount($exoId, $interId)
    {
        $dql = 'SELECT r.mark, count(r.mark) as nb
            FROM UJM\ExoBundle\Entity\Response r, UJM\ExoBundle\Entity\Interaction i, UJM\ExoBundle\Entity\Question q, UJM\ExoBundle\Entity\Paper p
            WHERE r.interaction=i.id AND i.question=q.id AND r.paper=p.id AND p.exercise= ?1 AND r.interaction = ?2 AND r.response != \'\' GROUP BY r.mark';

        $query = $this->_em->createQuery($dql)
                      ->setParameters(array(1 => $exoId, 2 => $interId));

        return $query->getResult();
    }

    /**
     * Send the score for an exercise and an interaction
     *
     * @access public
     *
     * @param integer $exoId id Exercise
     * @param integer $interId id Interaction
     *
     * Return array[Response]
     */
    public function getExerciseInterResponses($exoId, $interId)
    {
        $dql = 'SELECT r.mark
            FROM UJM\ExoBundle\Entity\Response r, UJM\ExoBundle\Entity\Interaction i, UJM\ExoBundle\Entity\Question q, UJM\ExoBundle\Entity\Paper p
            WHERE r.interaction=i.id AND i.question=q.id AND r.paper=p.id AND p.exercise= ?1 AND r.interaction = ?2 ORDER BY p.id';

        $query = $this->_em->createQuery($dql)
                      ->setParameters(array(1 => $exoId, 2 => $interId));

        return $query->getResult();
    }
}
